# Rate Limiting Configuration

# Define rate limit zones
# General API limit: 10 requests per second with burst of 20
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;

# Login/Auth limit: 5 requests per minute with burst of 10
limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=5r/m;

# Static assets limit: 100 requests per second with burst of 200
limit_req_zone $binary_remote_addr zone=static_limit:10m rate=100r/s;

# Search/Heavy endpoints: 2 requests per second with burst of 5
limit_req_zone $binary_remote_addr zone=search_limit:10m rate=2r/s;

# Global connection limit per IP
limit_conn_zone $binary_remote_addr zone=conn_limit:10m;

# Request limit by server (for DDoS protection)
limit_req_zone $server_name zone=server_limit:10m rate=1000r/s;

# Whitelisted IPs (internal services, monitoring, etc)
geo $whitelist {
    default 0;
    127.0.0.1 1;
    10.0.0.0/8 1;
    172.16.0.0/12 1;
    192.168.0.0/16 1;
}

# Rate limit status codes
limit_req_status 429;
limit_conn_status 429;

# Custom error page for rate limiting
error_page 429 /429.html;
location = /429.html {
    root /etc/nginx/error_pages;
    internal;
    add_header Retry-After 60 always;
    add_header X-RateLimit-Limit 10 always;
    add_header X-RateLimit-Remaining 0 always;
    add_header X-RateLimit-Reset $time_iso8601 always;
    default_type text/html;
    return 429 '<!DOCTYPE html>
<html>
<head>
    <title>429 Too Many Requests</title>
    <style>
        body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
        h1 { color: #e74c3c; }
        p { color: #555; }
        .retry { margin-top: 20px; color: #3498db; }
    </style>
</head>
<body>
    <h1>429 - Too Many Requests</h1>
    <p>You have made too many requests. Please try again later.</p>
    <p class="retry">Retry after: 60 seconds</p>
</body>
</html>';
}

# Apply rate limiting to different endpoints
location /api/ {
    # Skip rate limiting for whitelisted IPs
    if ($whitelist) {
        break;
    }
    
    limit_req zone=api_limit burst=20 nodelay;
    limit_conn conn_limit 10;
    
    try_files $uri @frankenphp;
}

location ~ ^/(login|register|password|auth)/ {
    if ($whitelist) {
        break;
    }
    
    limit_req zone=auth_limit burst=10;
    limit_conn conn_limit 5;
    
    try_files $uri @frankenphp;
}

location /search {
    if ($whitelist) {
        break;
    }
    
    limit_req zone=search_limit burst=5;
    limit_conn conn_limit 3;
    
    try_files $uri @frankenphp;
}

# Global server protection
location / {
    limit_req zone=server_limit burst=1000 nodelay;
    
    # Connection limits
    limit_conn conn_limit 20;
    
    try_files $uri @frankenphp;
}

# Monitoring endpoint should not be rate limited
location /nginx_status {
    stub_status on;
    access_log off;
    allow 127.0.0.1;
    allow 10.0.0.0/8;
    allow 172.16.0.0/12;
    allow 192.168.0.0/16;
    deny all;
}