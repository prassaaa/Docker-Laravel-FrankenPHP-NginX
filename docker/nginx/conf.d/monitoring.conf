# NGINX Monitoring Configuration

# Access log format with performance metrics
log_format performance '$remote_addr - $remote_user [$time_local] '
                      '"$request" $status $body_bytes_sent '
                      '"$http_referer" "$http_user_agent" '
                      'rt=$request_time uct="$upstream_connect_time" '
                      'uht="$upstream_header_time" urt="$upstream_response_time" '
                      'cs=$upstream_cache_status';

log_format json_analytics escape=json '{'
    '"time_local":"$time_local",'
    '"remote_addr":"$remote_addr",'
    '"remote_user":"$remote_user",'
    '"request":"$request",'
    '"status": "$status",'
    '"body_bytes_sent":"$body_bytes_sent",'
    '"request_time":"$request_time",'
    '"http_referrer":"$http_referer",'
    '"http_user_agent":"$http_user_agent",'
    '"upstream_connect_time":"$upstream_connect_time",'
    '"upstream_header_time":"$upstream_header_time",'
    '"upstream_response_time":"$upstream_response_time",'
    '"upstream_cache_status":"$upstream_cache_status",'
    '"ssl_protocol":"$ssl_protocol",'
    '"ssl_cipher":"$ssl_cipher",'
    '"scheme":"$scheme",'
    '"request_method":"$request_method",'
    '"server_protocol":"$server_protocol",'
    '"pipe":"$pipe",'
    '"gzip_ratio":"$gzip_ratio"'
'}';

# Enable access logs for monitoring (only for specific endpoints)
access_log /var/log/nginx/performance.log performance buffer=32k flush=5s;
access_log /var/log/nginx/analytics.log json_analytics buffer=32k flush=5s;

# NGINX status endpoint
location /nginx_status {
    stub_status on;
    access_log off;
    
    # Security: Only allow from internal IPs
    allow 127.0.0.1;
    allow 10.0.0.0/8;
    allow 172.16.0.0/12;
    allow 192.168.0.0/16;
    deny all;
}

# Extended status endpoint with more details
location /nginx_status_extended {
    default_type text/plain;
    
    content_by_lua_block {
        local cjson = require "cjson"
        
        -- Basic NGINX stats
        local stats = {
            timestamp = ngx.time(),
            hostname = ngx.var.hostname,
            nginx_version = ngx.var.nginx_version,
            
            -- Connection stats
            connections = {
                active = ngx.var.connections_active,
                reading = ngx.var.connections_reading,
                writing = ngx.var.connections_writing,
                waiting = ngx.var.connections_waiting
            },
            
            -- Request stats
            requests = {
                total = ngx.var.request_id,
                current_uri = ngx.var.uri,
                method = ngx.var.request_method,
                http_version = ngx.var.server_protocol
            },
            
            -- Performance metrics
            performance = {
                request_time = ngx.var.request_time,
                upstream_response_time = ngx.var.upstream_response_time,
                upstream_connect_time = ngx.var.upstream_connect_time,
                upstream_header_time = ngx.var.upstream_header_time
            },
            
            -- Cache stats
            cache = {
                status = ngx.var.upstream_cache_status,
                hit_ratio = ngx.var.upstream_cache_hit_ratio
            }
        }
        
        ngx.say(cjson.encode(stats))
    }
    
    access_log off;
    
    # Security
    allow 127.0.0.1;
    allow 10.0.0.0/8;
    allow 172.16.0.0/12;
    allow 192.168.0.0/16;
    deny all;
}

# Health check endpoint
location /health {
    default_type text/plain;
    return 200 "healthy\n";
    access_log off;
}

# Detailed health check
location /health/details {
    default_type application/json;
    
    content_by_lua_block {
        local cjson = require "cjson"
        
        -- Check upstream health
        local upstream_ok = true
        local details = ""
        
        -- Try to connect to FrankenPHP
        local sock = ngx.socket.tcp()
        sock:settimeout(1000) -- 1 second timeout
        local ok, err = sock:connect("php", 8080)
        
        if not ok then
            upstream_ok = false
            details = "Cannot connect to FrankenPHP: " .. err
        else
            sock:close()
        end
        
        local health = {
            status = upstream_ok and "healthy" or "unhealthy",
            timestamp = ngx.time(),
            checks = {
                nginx = "ok",
                upstream = upstream_ok and "ok" or "failed",
                ssl = ngx.var.ssl_protocol and "ok" or "not configured"
            },
            details = details
        }
        
        if upstream_ok then
            ngx.status = 200
        else
            ngx.status = 503
        end
        
        ngx.say(cjson.encode(health))
    }
    
    access_log off;
}

# Metrics endpoint for Prometheus
location /metrics {
    default_type text/plain;
    
    content_by_lua_block {
        -- NGINX metrics in Prometheus format
        ngx.say("# HELP nginx_connections_active Active client connections")
        ngx.say("# TYPE nginx_connections_active gauge")
        ngx.say("nginx_connections_active " .. ngx.var.connections_active)
        
        ngx.say("# HELP nginx_connections_reading Reading client connections")
        ngx.say("# TYPE nginx_connections_reading gauge")
        ngx.say("nginx_connections_reading " .. ngx.var.connections_reading)
        
        ngx.say("# HELP nginx_connections_writing Writing client connections")
        ngx.say("# TYPE nginx_connections_writing gauge")
        ngx.say("nginx_connections_writing " .. ngx.var.connections_writing)
        
        ngx.say("# HELP nginx_connections_waiting Waiting client connections")
        ngx.say("# TYPE nginx_connections_waiting gauge")
        ngx.say("nginx_connections_waiting " .. ngx.var.connections_waiting)
        
        ngx.say("# HELP nginx_http_requests_total Total HTTP requests")
        ngx.say("# TYPE nginx_http_requests_total counter")
        ngx.say("nginx_http_requests_total " .. ngx.var.request_id)
    }
    
    access_log off;
    
    # Security
    allow 127.0.0.1;
    allow 10.0.0.0/8;
    allow 172.16.0.0/12;
    allow 192.168.0.0/16;
    deny all;
}

# Request tracing endpoint (for debugging)
location /trace {
    default_type application/json;
    
    add_header X-Request-ID $request_id always;
    add_header X-Request-Time $request_time always;
    add_header X-Upstream-Response-Time $upstream_response_time always;
    
    return 200 '{"request_id":"$request_id","timestamp":"$time_iso8601","method":"$request_method","uri":"$uri","status":"$status","request_time":"$request_time","upstream_time":"$upstream_response_time"}';
    
    access_log /var/log/nginx/trace.log performance;
}